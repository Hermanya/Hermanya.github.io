{"expireTime":9007200813404586000,"key":"transformer-remark-markdown-html-e4d6ba90343826cb4f6758ecc96aff51-gatsby-remark-prettiergatsby-remark-imagesgatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p><em>This post was originally published <a href=\"https://github.com/kettanaito/atomic-layout/issues/144\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">on GitHub</a>.</em></p>\n<h2 id=\"atomic-layout\"><a href=\"#atomic-layout\" aria-label=\"atomic layout permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Atomic-layout</h2>\n<p>I have recently refactored <a href=\"my-website\">my website</a> from Rebass <code class=\"language-text\">Flex</code>-based layouts to <code class=\"language-text\">atomic-layout</code> and then to <code class=\"language-text\">styled-system</code>. Why did I do it? I’m new to CSS grid, but I have heard <a href=\"css-grid-changes-everything\">good things</a> about it. And I’ve been following <a href=\"kettanaito\">Kettanaito</a> for a while now, he is working on <code class=\"language-text\">atomic-layout</code> for about a year. I always wanted to try building something with <code class=\"language-text\">atomic-layout</code>, but the opportunity did not present itself until I decided to rebuild my website.</p>\n<p>Overall, I’m glad I started my CSS grid journey from <code class=\"language-text\">atomic-layout</code>. This library has great docs powered by Gitbook, another project I admire and have actually contributed to. The docs start with the motivation section, where Kettanaito outlines the core principals of composition and responsiveness in <code class=\"language-text\">atomic-layout</code>. And that makes sense, but in retrospective, I think the #1 motivation was different for me. </p>\n<p>CSS grid helps me to avoid adding margins all over the place. Just think about it, if you are a frontend developer, how often do you wonder if you should add a bottom margin to this component, or a top margin to the next one. What about the last component in the list, will it have a margin too? Or do you need to do the <code class=\"language-text\">index !== array.length - 1 &amp;&amp; ...</code> dance.</p>\n<p>My absolutely favorite thing about <code class=\"language-text\">atomic-layout</code> is that it does not render components that are not in the current template. When I say “current template”, I refer to the responsive nature of <code class=\"language-text\">atomic-layout</code> and how you can have different templates for different viewport sizes. This is great. On my website I 3 main sections: my bio, my external links, and my pinned GitHub projects. All three sections fit very nicely onto a desktop size screen. However, on mobile, I decided to separate them into individual pages and separate layouts. With <code class=\"language-text\">atomic-layout</code> I can reuse the <code class=\"language-text\">children</code> function that renders all the components but uses different templates for different mobile pages that show subsets of those components. </p>\n<p>Now, regarding things that I don’t quite like about <code class=\"language-text\">atomic-layout</code>. The number one would probably be the <code class=\"language-text\">children</code> function that <code class=\"language-text\">Composition</code> takes, which in turn takes an object of <code class=\"language-text\">grid-area</code> wrappers. I see why the author has done it this way because <em>render-props</em> are cool and this why you don’t have to worry about <code class=\"language-text\">grid-area</code>. But I found myself in constant need to come up with names for these wrappers. And I know I’m not alone in that naming things is difficult.</p>\n<p>Another thing that could be better about <code class=\"language-text\">atomic-layout</code> is the API. It seems too new for me. And I don’t like that it does not map to the actual CSS property names. I’m sure every frontend developer who has worked with Bootstrap-type grids can figure out what a <code class=\"language-text\">gutter</code> is, but the CSS grid term for that is <code class=\"language-text\">grid-gap</code> and I think the CSS Working Group would like us to adopt the new terminology moving forward.</p>\n<h2 id=\"styled-system\"><a href=\"#styled-system\" aria-label=\"styled system permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Styled-system</h2>\n<p>When I was integrating <code class=\"language-text\">atomic-layout</code> onto my website I browsed the GitHub page of the project quite a lot. And found <a href=\"styled-system-issue\">this issue</a>, which I found curious. I’m a big fan of <code class=\"language-text\">styled-system</code>. My website is built with it. And funny enough at first I was upset that <code class=\"language-text\">atomic-layout</code> does not automatically integrate with my breakpoints from <code class=\"language-text\">styled-system</code>. I never thought of <code class=\"language-text\">styled-system</code> as a competitor for <code class=\"language-text\">atomic-layout</code>. Mainly because I use <code class=\"language-text\">Rebass</code> and it does not have a grid component, so I assumed that the grid is out of <code class=\"language-text\">styled-systems</code>’s domain, but turns out it’s not. It turns out I can implement my own grid component, very similar to <code class=\"language-text\">atomic-layout</code>, in just about 30 lines of code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> styled <span class=\"token keyword\">from</span> <span class=\"token string\">'styled-components'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    gridAutoColumns<span class=\"token punctuation\">,</span>\n    gridAutoRows<span class=\"token punctuation\">,</span>\n    gridGap<span class=\"token punctuation\">,</span>\n    gridTemplateAreas<span class=\"token punctuation\">,</span>\n    gridTemplateRows<span class=\"token punctuation\">,</span>\n    gridTemplateColumns<span class=\"token punctuation\">,</span>\n    space<span class=\"token punctuation\">,</span>\n    gridArea<span class=\"token punctuation\">,</span>\n    display\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'styled-system'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Grid <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token string\">`\n    display: grid;\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gridTemplateAreas<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gridGap<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gridAutoRows<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gridAutoColumns<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gridTemplateRows<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gridTemplateColumns<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>space<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>gridArea<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>display<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Grid<span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you are not familiar with <code class=\"language-text\">styled-system</code>, what we have here is a bunch of “mixins” if you will, that expose certain react props relevant to the CSS grid APIs. Note that I added <code class=\"language-text\">space</code> for padding only, because who needs margins anymore? And <code class=\"language-text\">display</code> is for hiding elements that are not in the current template. This part I’m not quite happy about, but this is the best I could think of for now.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted\">- const repoTemplate = `</span>\n<span class=\"token deleted\">-       emoji title</span>\n<span class=\"token deleted\">-       emoji description</span>\n<span class=\"token deleted\">-       emoji links</span>\n<span class=\"token deleted\">-`;</span></code></pre></div>\n<p>The new <code class=\"language-text\">Grid</code> requires templates in a slightly different format: the double quotes are required. But on the flip side, the template is no longer space sensitive and can be inlined into props. </p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted\">- &lt;Composition </span>\n<span class=\"token deleted\">-     template={repoTemplate} </span>\n<span class=\"token deleted\">-     gutter={theme.space[4]} </span>\n<span class=\"token deleted\">- ></span>\n<span class=\"token deleted\">-     {({Emoji, Title, Description, Links}) => (</span>\n<span class=\"token deleted\">-          &lt;></span>\n<span class=\"token deleted\">-              &lt;Emoji as={Repo.Emoji}></span>\n<span class=\"token deleted\">-                  {repo.description.substr(0, 2)}</span>\n<span class=\"token deleted\">-              &lt;/Emoji></span>\n<span class=\"token inserted\">+  &lt;Grid</span>\n<span class=\"token inserted\">+      gridTemplateAreas={`</span>\n<span class=\"token inserted\">+          \"emoji title\"</span>\n<span class=\"token inserted\">+          \"emoji description\"</span>\n<span class=\"token inserted\">+          \"emoji links\"</span>\n<span class=\"token inserted\">+      `}</span>\n<span class=\"token inserted\">+      gridGap={4}</span>\n<span class=\"token inserted\">+  ></span>\n<span class=\"token inserted\">+      &lt;Emoji gridArea=\"emoji\"></span>\n<span class=\"token inserted\">+          {repo.description.substr(0, 2)}</span>\n<span class=\"token inserted\">+      &lt;/Emoji></span></code></pre></div>\n<p>As you can see here, that API is a little different, but not too much. The <code class=\"language-text\">template</code> became <code class=\"language-text\">gridTemplateAreas</code>, the <code class=\"language-text\">gutter</code> turned into <code class=\"language-text\">gridGap</code>. And there are no more wrapper components so I need to add <code class=\"language-text\">gridArea</code> from <code class=\"language-text\">styled-system</code> as you can see below, but on the other hand, I don’t need to namespace the <code class=\"language-text\">Emoji</code> component anymore.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted\">- Repo.Emoji = styled.p`</span>\n<span class=\"token inserted\">+ const Emoji = styled.p`</span>\n<span class=\"token inserted\">+    ${gridArea}</span></code></pre></div>\n<p>And to give you another example, here is a dynamic grid of repos you can see on <a href=\"my-website-repos\">my website</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted\">- {({Repos, More, TotalStars, Bio}) => (</span>\n<span class=\"token deleted\">-     &lt;Repos></span>\n<span class=\"token deleted\">-         &lt;Composition</span>\n<span class=\"token deleted\">-             autoRows</span>\n<span class=\"token deleted\">-             areas=\"area\"</span>\n<span class=\"token deleted\">-             areasLg=\"area area\"</span>\n<span class=\"token deleted\">-             areasXl=\"area area area\"</span>\n<span class=\"token deleted\">-             gutter={theme.space[4]}</span>\n<span class=\"token deleted\">-             gutterLg={theme.space[5]}</span>\n<span class=\"token deleted\">-         ></span>\n<span class=\"token deleted\">-             {() => </span>\n<span class=\"token deleted\">-             pinnedRepoTrail.map(({x, ...rest}, index) => {</span>\n<span class=\"token inserted\">+  &lt;Grid</span>\n<span class=\"token inserted\">+      gridAutoRows</span>\n<span class=\"token inserted\">+      gridArea=\"repos\"</span>\n<span class=\"token inserted\">+      gridTemplateAreas={[</span>\n<span class=\"token inserted\">+          '\"area\"',</span>\n<span class=\"token inserted\">+          '\"area\"',</span>\n<span class=\"token inserted\">+          '\"area area\"',</span>\n<span class=\"token inserted\">+          '\"area area area\"'</span>\n<span class=\"token inserted\">+      ]}</span>\n<span class=\"token inserted\">+      gridGap={{sm: 4, lg: 5}}</span>\n<span class=\"token inserted\">+  ></span>\n<span class=\"token inserted\">+      {pinnedRepoTrail.map(({x, ...rest}, index) => {</span></code></pre></div>\n<h2 id=\"summary\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<p>This concludes my comparison. I think both approaches are very worthy, and the main difference between them is naming conventions that the two libraries adopt. Personally, I’m going to stick with <code class=\"language-text\">styled-system</code>, because its naming feels more standardized to me. And I like how all <code class=\"language-text\">styled-system</code> props are universally responsive.</p>\n<p>Overall I’m very happy with the CSS grid, and I hope to use it more in the future.</p>\n<p><a href=\"https://starikov.dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">my-website</a>\n<a href=\"https://starikov.dev/github/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">my-website-repos</a>\n<a href=\"https://www.youtube.com/watch?v=txZq7Laz7_4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">css-grid-changes-everything</a>\n<a href=\"https://github.com/kettanaito\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kettanaito</a>\n<a href=\"https://github.com/kettanaito/atomic-layout/issues/144\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-system-issue</a></p>"}